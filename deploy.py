from web3 import Web3
import yaml
import logging

# 配置日志
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/deploy.log'),  # 保留文件日志
        logging.StreamHandler()  # 新增控制台输出
    ]
)

# 加载配置文件
with open('config.yaml') as f:
    data = yaml.safe_load(f)

rpc_url = data['network']['rpc_url']

# 提取主地址和私钥
main_address = data['accounts']['main']['address']
private_key = data['accounts']['main']['private_key']


# 连接到RPC节点
w3 = Web3(Web3.HTTPProvider(rpc_url))

# 合约编译结果
contract_abi = [
	{
		"inputs": [],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"anonymous": False,
		"inputs": [
			{
				"indexed": True,
				"internalType": "address",
				"name": "depositor",
				"type": "address"
			},
			{
				"indexed": False,
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "Deposited",
		"type": "event"
	},
	{
		"anonymous": False,
		"inputs": [
			{
				"indexed": True,
				"internalType": "address",
				"name": "recipient",
				"type": "address"
			},
			{
				"indexed": False,
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "TransferFailure",
		"type": "event"
	},
	{
		"anonymous": False,
		"inputs": [
			{
				"indexed": True,
				"internalType": "address",
				"name": "recipient",
				"type": "address"
			},
			{
				"indexed": False,
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "TransferSuccess",
		"type": "event"
	},
	{
		"anonymous": False,
		"inputs": [
			{
				"indexed": True,
				"internalType": "address",
				"name": "depositor",
				"type": "address"
			},
			{
				"indexed": False,
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "Withdrawn",
		"type": "event"
	},
	{
		"inputs": [],
		"name": "deposit",
		"outputs": [],
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"name": "deposits",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "depositor",
				"type": "address"
			},
			{
				"internalType": "address[]",
				"name": "recipients",
				"type": "address[]"
			},
			{
				"internalType": "uint256",
				"name": "amountPerRecipient",
				"type": "uint256"
			}
		],
		"name": "distributeFixed",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "depositor",
				"type": "address"
			}
		],
		"name": "emergencyWithdraw",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "owner",
		"outputs": [
			{
				"internalType": "address payable",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "withdraw",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	}
]
contract_bytecode = "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061105e806100606000396000f3fe6080604052600436106100555760003560e01c80630ab354f11461005a5780632e1a7d4d146100835780636ff1c9bc146100ac5780638da5cb5b146100d5578063d0e30db014610100578063fc7e286d1461010a575b600080fd5b34801561006657600080fd5b50610081600480360381019061007c9190610adc565b610147565b005b34801561008f57600080fd5b506100aa60048036038101906100a59190610b48565b61057c565b005b3480156100b857600080fd5b506100d360048036038101906100ce9190610ab3565b610752565b005b3480156100e157600080fd5b506100ea61095d565b6040516100f79190610d3e565b60405180910390f35b610108610981565b005b34801561011657600080fd5b50610131600480360381019061012c9190610ab3565b610a27565b60405161013e9190610e19565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101cc90610dd9565b60405180910390fd5b600083839050826101e69190610ea6565b905080600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561026a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026190610d99565b60405180910390fd5b6000805b8585905081101561049b5760008686838181106102b4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906102c99190610ab3565b73ffffffffffffffffffffffffffffffffffffffff1685611388906040516102f090610d29565b600060405180830381858888f193505050503d806000811461032e576040519150601f19603f3d011682016040523d82523d6000602084013e610333565b606091505b5050905080156103eb57828061034890610f82565b935050868683818110610384577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906103999190610ab3565b73ffffffffffffffffffffffffffffffffffffffff167f2e1ece5fb4a04cb9407bb825ceb4c6d6d402c18ba1cbe2054241fb1a86fd58da866040516103de9190610e19565b60405180910390a2610487565b868683818110610424577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906104399190610ab3565b73ffffffffffffffffffffffffffffffffffffffff167f10f97fa9dacecd8b059934119398847e35bb565469f9201aa6b1d455920a2aaf8660405161047e9190610e19565b60405180910390a25b50808061049390610f82565b91505061026e565b50600083826104aa9190610ea6565b905080600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104fb9190610f00565b92505081905550600081846105109190610f00565b905060008111156105725780600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461056a9190610e50565b925050819055505b5050505050505050565b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156105fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f590610d79565b60405180910390fd5b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461064d9190610f00565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161067a90610d29565b60006040518083038185875af1925050503d80600081146106b7576040519150601f19603f3d011682016040523d82523d6000602084013e6106bc565b606091505b5050905080610700576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f790610d59565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5836040516107469190610e19565b60405180910390a25050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d790610dd9565b60405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111610867576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085e90610df9565b60405180910390fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008273ffffffffffffffffffffffffffffffffffffffff16826040516108d290610d29565b60006040518083038185875af1925050503d806000811461090f576040519150601f19603f3d011682016040523d82523d6000602084013e610914565b606091505b5050905080610958576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094f90610db9565b60405180910390fd5b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109d09190610e50565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c434604051610a1d9190610e19565b60405180910390a2565b60016020528060005260406000206000915090505481565b600081359050610a4e81610ffa565b92915050565b60008083601f840112610a6657600080fd5b8235905067ffffffffffffffff811115610a7f57600080fd5b602083019150836020820283011115610a9757600080fd5b9250929050565b600081359050610aad81611011565b92915050565b600060208284031215610ac557600080fd5b6000610ad384828501610a3f565b91505092915050565b60008060008060608587031215610af257600080fd5b6000610b0087828801610a3f565b945050602085013567ffffffffffffffff811115610b1d57600080fd5b610b2987828801610a54565b93509350506040610b3c87828801610a9e565b91505092959194509250565b600060208284031215610b5a57600080fd5b6000610b6884828501610a9e565b91505092915050565b610b7a81610f46565b82525050565b6000610b8d600f83610e3f565b91507f5769746864726177206661696c656400000000000000000000000000000000006000830152602082019050919050565b6000610bcd601483610e3f565b91507f496e73756666696369656e742062616c616e63650000000000000000000000006000830152602082019050919050565b6000610c0d601e83610e3f565b91507f4465706f7369746f722062616c616e636520696e73756666696369656e7400006000830152602082019050919050565b6000610c4d601983610e3f565b91507f456d657267656e6379207769746864726177206661696c6564000000000000006000830152602082019050919050565b6000610c8d600983610e3f565b91507f4e6f74206f776e657200000000000000000000000000000000000000000000006000830152602082019050919050565b6000610ccd600083610e34565b9150600082019050919050565b6000610ce7600c83610e3f565b91507f5a65726f2062616c616e636500000000000000000000000000000000000000006000830152602082019050919050565b610d2381610f78565b82525050565b6000610d3482610cc0565b9150819050919050565b6000602082019050610d536000830184610b71565b92915050565b60006020820190508181036000830152610d7281610b80565b9050919050565b60006020820190508181036000830152610d9281610bc0565b9050919050565b60006020820190508181036000830152610db281610c00565b9050919050565b60006020820190508181036000830152610dd281610c40565b9050919050565b60006020820190508181036000830152610df281610c80565b9050919050565b60006020820190508181036000830152610e1281610cda565b9050919050565b6000602082019050610e2e6000830184610d1a565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610e5b82610f78565b9150610e6683610f78565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e9b57610e9a610fcb565b5b828201905092915050565b6000610eb182610f78565b9150610ebc83610f78565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ef557610ef4610fcb565b5b828202905092915050565b6000610f0b82610f78565b9150610f1683610f78565b925082821015610f2957610f28610fcb565b5b828203905092915050565b6000610f3f82610f58565b9050919050565b6000610f5182610f58565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610f8d82610f78565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610fc057610fbf610fcb565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b61100381610f34565b811461100e57600080fd5b50565b61101a81610f78565b811461102557600080fd5b5056fea26469706673582212205910b32729efeac05f2943f6221a8f577bfefb3a4543f50db74a2c8663dadb8f64736f6c63430008000033"

def update_config_with_contract_address(contract_address):
    """将合约地址写入 config.yaml 文件"""
    with open('config.yaml', 'r') as f:
        config = yaml.safe_load(f)

    config['contractAddress'] = contract_address

    with open('config.yaml', 'w') as f:
        yaml.safe_dump(config, f, default_flow_style=False)


def deploy_contract():
    """部署合约并返回合约地址"""
    # 构造合约
    contract = w3.eth.contract(
        abi=contract_abi,
        bytecode=contract_bytecode
    )

    # 构建部署交易
    tx = contract.constructor().build_transaction({
        'from': main_address,
        'nonce': w3.eth.get_transaction_count(main_address),
        'gasPrice': w3.eth.gas_price,
        'gas': 1000000
    })

    # 签名发送
    signed_tx = w3.eth.account.sign_transaction(tx, private_key)
    tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
    receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

    # 合约地址
    contract_address = receipt['contractAddress']

    # 更新配置文件
    update_config_with_contract_address(contract_address)

    # 拼接区块浏览器链接
    explorer_url = f"https://testnet.monadexplorer.com/tx/0x{tx_hash.hex()}"

    # 日志记录
    logging.info(f"合约部署成功并写入配置文件，地址: {contract_address}")
    logging.info(f"交易哈希: 0x{tx_hash.hex()}")
    logging.info(f"区块浏览器链接: {explorer_url}")

    return contract_address, explorer_url


# 使用示例
if __name__ == "__main__":
    print("正在部署代币分发智能合约。。。")
    contract_address, explorer_url = deploy_contract()
